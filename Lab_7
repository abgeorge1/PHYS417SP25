{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "581f5f99",
      "metadata": {
        "id": "581f5f99"
      },
      "source": [
        "# Lab 7 Template"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d682e0d0",
      "metadata": {
        "id": "d682e0d0"
      },
      "source": [
        "## Preliminary"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a4a3fe1",
      "metadata": {
        "id": "8a4a3fe1"
      },
      "source": [
        "### Packages to install\n",
        "\n",
        "- ucimlrepo (for grabbing datasets)\n",
        "- transformers\n",
        "- autogen\n",
        "- jupyter (if you aren't on the latest version, there's a dependency in tqdm that complains)\n",
        "\n",
        "#### Install with pip\n",
        "\n",
        "- pip install ucimlrepo transformers autogen jupyter\n",
        "\n",
        "### From lab 3\n",
        "\n",
        "- pandas, numpy, matplotlib.pyplot, seaborn, tqdm, torch, sklearn\n",
        "\n",
        "#### Install everything with pip\n",
        "\n",
        "- pip install ucimlrepo transformers autogen pandas numpy matplotlib seaborn tqdm torch scikit-learn jupyter"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "eac90980",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "eac90980",
        "outputId": "d92e325d-3b41-4438-f659-1f1df64d46df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: ucimlrepo in /usr/local/lib/python3.11/dist-packages (0.0.7)\n",
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.51.3)\n",
            "Requirement already satisfied: autogen in /usr/local/lib/python3.11/dist-packages (0.9.1.post0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (4.67.1)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: jupyter in /usr/local/lib/python3.11/dist-packages (1.1.1)\n",
            "Requirement already satisfied: certifi>=2020.12.5 in /usr/local/lib/python3.11/dist-packages (from ucimlrepo) (2025.4.26)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.30.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.31.1)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.1)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
            "Requirement already satisfied: ag2==0.9.1post0 in /usr/local/lib/python3.11/dist-packages (from autogen) (0.9.1.post0)\n",
            "Requirement already satisfied: anyio<5.0.0,>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (4.9.0)\n",
            "Requirement already satisfied: asyncer==0.0.8 in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (0.0.8)\n",
            "Requirement already satisfied: diskcache in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (5.6.3)\n",
            "Requirement already satisfied: docker in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (7.1.0)\n",
            "Requirement already satisfied: httpx<1,>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (0.28.1)\n",
            "Requirement already satisfied: pydantic<3,>=2.6.1 in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (2.11.4)\n",
            "Requirement already satisfied: python-dotenv in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (1.1.0)\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (3.1.0)\n",
            "Requirement already satisfied: tiktoken in /usr/local/lib/python3.11/dist-packages (from ag2==0.9.1post0->autogen) (0.9.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.3)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: notebook in /usr/local/lib/python3.11/dist-packages (from jupyter) (6.5.7)\n",
            "Requirement already satisfied: jupyter-console in /usr/local/lib/python3.11/dist-packages (from jupyter) (6.1.0)\n",
            "Requirement already satisfied: nbconvert in /usr/local/lib/python3.11/dist-packages (from jupyter) (7.16.6)\n",
            "Requirement already satisfied: ipykernel in /usr/local/lib/python3.11/dist-packages (from jupyter) (6.17.1)\n",
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (from jupyter) (7.7.1)\n",
            "Requirement already satisfied: jupyterlab in /usr/local/lib/python3.11/dist-packages (from jupyter) (4.4.2)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.30.0->transformers) (1.1.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: debugpy>=1.0 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (1.8.0)\n",
            "Requirement already satisfied: ipython>=7.23.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (7.34.0)\n",
            "Requirement already satisfied: jupyter-client>=6.1.12 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (7.4.9)\n",
            "Requirement already satisfied: matplotlib-inline>=0.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (0.1.7)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (1.6.0)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (5.9.5)\n",
            "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (24.0.1)\n",
            "Requirement already satisfied: tornado>=6.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (6.4.2)\n",
            "Requirement already satisfied: traitlets>=5.1.0 in /usr/local/lib/python3.11/dist-packages (from ipykernel->jupyter) (5.7.1)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->jupyter) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->jupyter) (3.6.10)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->jupyter) (3.0.15)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-console->jupyter) (3.0.51)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from jupyter-console->jupyter) (2.19.1)\n",
            "Requirement already satisfied: async-lru>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (2.0.5)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (5.7.2)\n",
            "Requirement already satisfied: jupyter-lsp>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (2.2.5)\n",
            "Requirement already satisfied: jupyter-server<3,>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (2.16.0)\n",
            "Requirement already satisfied: jupyterlab-server<3,>=2.27.1 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (2.27.3)\n",
            "Requirement already satisfied: notebook-shim>=0.2 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (0.2.4)\n",
            "Requirement already satisfied: setuptools>=41.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab->jupyter) (75.2.0)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (4.13.4)\n",
            "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert->jupyter) (6.2.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (0.3.0)\n",
            "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (3.1.3)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (0.10.2)\n",
            "Requirement already satisfied: nbformat>=5.7 in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (5.10.4)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert->jupyter) (1.5.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook->jupyter) (23.1.0)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook->jupyter) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook->jupyter) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook->jupyter) (0.21.1)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook->jupyter) (1.3.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.4.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0.0,>=3.0.0->ag2==0.9.1post0->autogen) (1.3.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert->jupyter) (0.5.1)\n",
            "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert->jupyter) (1.4.0)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<1,>=0.28.1->ag2==0.9.1post0->autogen) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<1,>=0.28.1->ag2==0.9.1post0->autogen) (0.16.0)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.11/dist-packages (from ipython>=7.23.1->ipykernel->jupyter) (0.19.2)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=7.23.1->ipykernel->jupyter) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=7.23.1->ipykernel->jupyter) (0.7.5)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=7.23.1->ipykernel->jupyter) (0.2.0)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=7.23.1->ipykernel->jupyter) (4.9.0)\n",
            "Requirement already satisfied: entrypoints in /usr/local/lib/python3.11/dist-packages (from jupyter-client>=6.1.12->ipykernel->jupyter) (0.4)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core->jupyterlab->jupyter) (4.3.8)\n",
            "Requirement already satisfied: jupyter-events>=0.11.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (0.12.0)\n",
            "Requirement already satisfied: jupyter-server-terminals>=0.4.4 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (0.5.3)\n",
            "Requirement already satisfied: overrides>=5.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (7.7.0)\n",
            "Requirement already satisfied: websocket-client>=1.7 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (1.8.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook->jupyter) (21.2.0)\n",
            "Requirement already satisfied: babel>=2.10 in /usr/local/lib/python3.11/dist-packages (from jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (2.17.0)\n",
            "Requirement already satisfied: json5>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (0.12.0)\n",
            "Requirement already satisfied: jsonschema>=4.18.0 in /usr/local/lib/python3.11/dist-packages (from jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (4.23.0)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat>=5.7->nbconvert->jupyter) (2.21.1)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->jupyter-console->jupyter) (0.2.13)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6.1->ag2==0.9.1post0->autogen) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6.1->ag2==0.9.1post0->autogen) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3,>=2.6.1->ag2==0.9.1post0->autogen) (0.4.0)\n",
            "Requirement already satisfied: ptyprocess in /usr/local/lib/python3.11/dist-packages (from terminado>=0.8.3->notebook->jupyter) (0.7.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert->jupyter) (2.7)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=7.23.1->ipykernel->jupyter) (0.8.4)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=4.18.0->jupyterlab-server<3,>=2.27.1->jupyterlab->jupyter) (0.24.0)\n",
            "Requirement already satisfied: python-json-logger>=2.0.4 in /usr/local/lib/python3.11/dist-packages (from jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (3.3.0)\n",
            "Requirement already satisfied: rfc3339-validator in /usr/local/lib/python3.11/dist-packages (from jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (0.1.4)\n",
            "Requirement already satisfied: rfc3986-validator>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (0.1.1)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook->jupyter) (1.17.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook->jupyter) (2.22)\n",
            "Requirement already satisfied: fqdn in /usr/local/lib/python3.11/dist-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (1.5.1)\n",
            "Requirement already satisfied: isoduration in /usr/local/lib/python3.11/dist-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (20.11.0)\n",
            "Requirement already satisfied: jsonpointer>1.13 in /usr/local/lib/python3.11/dist-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (3.0.0)\n",
            "Requirement already satisfied: uri-template in /usr/local/lib/python3.11/dist-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (1.3.0)\n",
            "Requirement already satisfied: webcolors>=24.6.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (24.11.1)\n",
            "Requirement already satisfied: arrow>=0.15.0 in /usr/local/lib/python3.11/dist-packages (from isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (1.3.0)\n",
            "Requirement already satisfied: types-python-dateutil>=2.8.10 in /usr/local/lib/python3.11/dist-packages (from arrow>=0.15.0->isoduration->jsonschema[format-nongpl]>=4.18.0->jupyter-events>=0.11.0->jupyter-server<3,>=2.4.0->jupyterlab->jupyter) (2.9.0.20241206)\n"
          ]
        }
      ],
      "source": [
        "# If you need to install stuff on colab\n",
        "!pip install ucimlrepo transformers autogen pandas numpy matplotlib seaborn tqdm torch scikit-learn jupyter"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b54903e1",
      "metadata": {
        "id": "b54903e1"
      },
      "source": [
        "### Intro\n",
        "\n",
        "The goal of this lab is to give you an idea of how you could use agents to help with physics tasks. It will also introduce you to AutoGen, one of the more popular frameworks at the moment for designing custom agentic workflows. We won't make use of all the tools it provides, just the very basics. Note also that many of the most interesting things one can do with AI-powered agents (see topics like retreival augmented generation (RAG)) require very large models to be performant, and many techniques require continuous/repeated training. This means large resource requirements, so for this lab we will just be using a very small LLM (Llama: TinyLlama-1.1B-Chat-v1.0). The results from this are nowhere near as good as something like chatGPT, but it should give you an idea of how a more advanced model (or models) might be able to do something really helpful/cool. This is an area of current research, so it will be interesting to see what they can do!\n",
        "\n",
        "Also because of the limited size of the model, the text parsing needs to be very mechanical, and in some places a bit obtuse. The better (and ideally specially trained for an agentic workflow, see RAG) your model is, the more this can be relaxed. If you're interested in working with agents in a more user-friendly way (hiding a lot of the mechanics that are on display here), check out sites like n8n or Google Gemini (be aware that these can require you to provide a lot of permissions). You can also feel free to replace TinyLlama with a call to a larger model using API keys if you have some.\n",
        "\n",
        "Finally, we would like to emphasize the use of copilot/similar tools for this lab in particular. These are agents too! And they are definitely the most performant agents you have easy access to.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1d3f282e",
      "metadata": {
        "id": "1d3f282e"
      },
      "source": [
        "## Lab"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "68bad3ed",
      "metadata": {
        "id": "68bad3ed"
      },
      "source": [
        "- There are two datasets, \"mnist\" (from Lab 3) and \"solar_flare\"\n",
        "- Try to get everything working with mnist, then try adding solar_flare\n",
        "    - This is one way agents can be helpful, since they can analyze a dataset you've never seen before and take a first crack at it much faster than you can"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d391c968",
      "metadata": {
        "id": "d391c968"
      },
      "source": [
        "## Imports"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "835b6358",
      "metadata": {
        "id": "835b6358"
      },
      "outputs": [],
      "source": [
        "# Import necessary packages\n",
        "\n",
        "%matplotlib inline\n",
        "\n",
        "from autogen import ConversableAgent, AssistantAgent\n",
        "from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import tqdm\n",
        "import torch\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from ucimlrepo import fetch_ucirepo"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5e85da87",
      "metadata": {
        "id": "5e85da87"
      },
      "source": [
        "### Lab 3 code (run and then minimize this)\n",
        "\n",
        "- Mostly just lab 3 code packaged into functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "1f462f1c",
      "metadata": {
        "id": "1f462f1c"
      },
      "outputs": [],
      "source": [
        "# Load MNIST Dataset in Numpy\n",
        "def load_mnist_data():\n",
        "    # 1000 training samples where each sample feature is a greyscale image with shape (28, 28)\n",
        "    # 1000 training targets where each target is an integer indicating the true digit\n",
        "    mnist_train_features = np.load('mnist_train_features.npy')\n",
        "    mnist_train_targets = np.load('mnist_train_targets.npy')\n",
        "\n",
        "    # 100 testing samples + targets\n",
        "    mnist_test_features = np.load('mnist_test_features.npy')\n",
        "    mnist_test_targets = np.load('mnist_test_targets.npy')\n",
        "\n",
        "    # Print the dimensions of training sample features/targets\n",
        "    #print(mnist_train_features.shape, mnist_train_targets.shape)\n",
        "    # Print the dimensions of testing sample features/targets\n",
        "    #print(mnist_test_features.shape, mnist_test_targets.shape)\n",
        "\n",
        "    return mnist_train_features, mnist_train_targets, mnist_test_features, mnist_test_targets\n",
        "\n",
        "\n",
        "def flatten_features(features):\n",
        "    # Flatten the features from (28, 28) to (784,)\n",
        "    return features.reshape(features.shape[0], -1)\n",
        "\n",
        "def scale_features(features):\n",
        "    scaler = StandardScaler()\n",
        "    return scaler.fit_transform(features)\n",
        "\n",
        "# More general function to load datasets, including solar_flare\n",
        "def load_dataset(dataset_name: str = \"\"):\n",
        "    if dataset_name == \"mnist\":\n",
        "        train_features, train_targets, test_features, test_targets = load_mnist_data()\n",
        "        train_features = flatten_features(train_features)\n",
        "        test_features = flatten_features(test_features)\n",
        "        train_features = scale_features(train_features)\n",
        "        test_features = scale_features(test_features)\n",
        "\n",
        "    elif dataset_name == \"solar_flare\":\n",
        "        # Load the solar flare dataset\n",
        "        solar_flare = fetch_ucirepo(id=89)\n",
        "\n",
        "        # Simplifying slightly for the sake of this example\n",
        "        solar_flare.data.targets = solar_flare.data.targets['severe flares']\n",
        "\n",
        "        # Split the solar flare dataset into train and test sets (90:10 split)\n",
        "        train_features, test_features, train_targets, test_targets = train_test_split(\n",
        "            solar_flare.data.features, solar_flare.data.targets, test_size=0.1, random_state=42\n",
        "        )\n",
        "\n",
        "        # Onehot encode modified Zurich class, largest spot size, spot distribution\n",
        "        onehot_columns = [\"modified Zurich class\", \"largest spot size\", \"spot distribution\"]\n",
        "        for col in onehot_columns:\n",
        "            onehot = pd.get_dummies(train_features[col], prefix=col)\n",
        "            train_features = pd.concat([train_features, onehot], axis=1)\n",
        "            train_features.drop(col, axis=1, inplace=True)\n",
        "\n",
        "            onehot = pd.get_dummies(test_features[col], prefix=col)\n",
        "            test_features = pd.concat([test_features, onehot], axis=1)\n",
        "            test_features.drop(col, axis=1, inplace=True)\n",
        "\n",
        "        # Scale the features\n",
        "        train_features = scale_features(train_features)\n",
        "        test_features = scale_features(test_features)\n",
        "\n",
        "        # Convert targets to numpy arrays\n",
        "        train_targets = train_targets.to_numpy()\n",
        "        test_targets = test_targets.to_numpy()\n",
        "\n",
        "    else:\n",
        "        raise ValueError(f\"Unknown dataset: {dataset_name}\")\n",
        "\n",
        "    # train-test split\n",
        "    train_features, val_features, train_targets, val_targets = train_test_split(train_features, train_targets, test_size=0.2)\n",
        "\n",
        "    return train_features, train_targets, val_features, val_targets, test_features, test_targets\n",
        "\n",
        "\n",
        "# Train\n",
        "def train_model(model, train_features, train_targets, validation_features, validation_targets,\n",
        "                test_features=None, test_targets=None, learning_rate=0.0015, epochs=80, batch_size=64):\n",
        "    \"\"\"\n",
        "    Train a neural network model on the provided data.\n",
        "\n",
        "    Parameters:\n",
        "        model: PyTorch model to train\n",
        "        train_features: Training features as numpy array\n",
        "        train_targets: Training targets as numpy array\n",
        "        validation_features: Validation features as numpy array\n",
        "        validation_targets: Validation targets as numpy array\n",
        "        test_features: Test features as numpy array (optional)\n",
        "        test_targets: Test targets as numpy array (optional)\n",
        "        learning_rate: Learning rate for optimizer\n",
        "        epochs: Number of training epochs\n",
        "        batch_size: Batch size for training\n",
        "\n",
        "    Returns:\n",
        "        tuple: (trained model, training loss list, validation accuracy list)\n",
        "    \"\"\"\n",
        "    # Initialize tracking lists\n",
        "    train_loss_list = np.zeros(epochs)\n",
        "    validation_accuracy_list = np.zeros(epochs)\n",
        "\n",
        "    # Convert numpy arrays to PyTorch tensors\n",
        "    train_inputs = torch.from_numpy(train_features).float()\n",
        "    train_targets = torch.from_numpy(train_targets).long()\n",
        "\n",
        "    validation_inputs = torch.from_numpy(validation_features).float()\n",
        "    validation_targets = torch.from_numpy(validation_targets).long()\n",
        "\n",
        "    if test_features is not None and test_targets is not None:\n",
        "        test_inputs = torch.from_numpy(test_features).float()\n",
        "        test_targets = torch.from_numpy(test_targets).long()\n",
        "        test_dataset = TensorDataset(test_inputs, test_targets)\n",
        "        test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "    # Create dataloaders\n",
        "    train_dataset = TensorDataset(train_inputs, train_targets)\n",
        "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "    validation_dataset = TensorDataset(validation_inputs, validation_targets)\n",
        "    validation_loader = DataLoader(validation_dataset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "    # Setup optimizer and scheduler\n",
        "    loss_func = torch.nn.CrossEntropyLoss()\n",
        "    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n",
        "    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=epochs)\n",
        "\n",
        "    # Move model to GPU if available\n",
        "    if torch.cuda.is_available():\n",
        "        model = model.cuda()\n",
        "        train_inputs = train_inputs.cuda()\n",
        "        validation_inputs = validation_inputs.cuda()\n",
        "        validation_targets = validation_targets.cuda()\n",
        "\n",
        "    # Training Loop\n",
        "    for epoch in tqdm.trange(epochs):\n",
        "        model.train()  # Set model to training mode\n",
        "        running_loss = 0.0\n",
        "\n",
        "        for batch_inputs, batch_targets in train_loader:\n",
        "            if torch.cuda.is_available():\n",
        "                batch_inputs, batch_targets = batch_inputs.cuda(), batch_targets.cuda()\n",
        "\n",
        "            optimizer.zero_grad()  # Reset gradients to zero\n",
        "            outputs = model(batch_inputs)  # Forward pass with current batch\n",
        "            loss = loss_func(outputs, batch_targets)  # Compute loss\n",
        "            loss.backward()  # Backward pass\n",
        "            optimizer.step()  # Update weights\n",
        "\n",
        "            running_loss += loss.item() * batch_inputs.size(0)\n",
        "\n",
        "        # Store average epoch loss\n",
        "        train_loss_list[epoch] = running_loss / len(train_dataset)\n",
        "        scheduler.step()  # Update learning rate with cosine annealing\n",
        "\n",
        "        # Compute Validation Accuracy\n",
        "        model.eval()  # Set model to evaluation mode\n",
        "        with torch.no_grad():\n",
        "            correct = 0\n",
        "            total = 0\n",
        "            for val_inputs, val_targets in validation_loader:\n",
        "                if torch.cuda.is_available():\n",
        "                    val_inputs, val_targets = val_inputs.cuda(), val_targets.cuda()\n",
        "                outputs = model(val_inputs)\n",
        "                _, predicted = torch.max(outputs.data, 1)\n",
        "                total += val_targets.size(0)\n",
        "                correct += (predicted == val_targets).sum().item()\n",
        "\n",
        "            validation_accuracy_list[epoch] = correct / total\n",
        "\n",
        "    # Compute test accuracy if test data is provided\n",
        "    test_accuracy = None\n",
        "    if test_features is not None and test_targets is not None:\n",
        "        model.eval()\n",
        "        with torch.no_grad():\n",
        "            correct = 0\n",
        "            total = 0\n",
        "            for test_inputs, test_targets in test_loader:\n",
        "                if torch.cuda.is_available():\n",
        "                    test_inputs, test_targets = test_inputs.cuda(), test_targets.cuda()\n",
        "                outputs = model(test_inputs)\n",
        "                _, predicted = torch.max(outputs.data, 1)\n",
        "                total += test_targets.size(0)\n",
        "                correct += (predicted == test_targets).sum().item()\n",
        "\n",
        "            test_accuracy = correct / total\n",
        "\n",
        "    return model, train_loss_list, validation_accuracy_list, test_accuracy\n",
        "\n",
        "\n",
        "# Visualize and evaluate\n",
        "def visualize_training(train_loss_list, validation_accuracy_list):\n",
        "    \"\"\"\n",
        "    Visualize training loss and validation accuracy.\n",
        "\n",
        "    Parameters:\n",
        "        train_loss_list: List of training losses\n",
        "        validation_accuracy_list: List of validation accuracies\n",
        "    \"\"\"\n",
        "    plt.figure(figsize = (12, 6))\n",
        "\n",
        "    # Visualize training loss with respect to iterations (1 iteration -> single batch)\n",
        "    plt.subplot(2, 1, 1)\n",
        "    plt.plot(train_loss_list, linewidth = 3)\n",
        "    plt.ylabel(\"training loss\")\n",
        "    plt.xlabel(\"epochs\")\n",
        "    sns.despine()\n",
        "\n",
        "    # Visualize validation accuracy with respect to epochs\n",
        "    plt.subplot(2, 1, 2)\n",
        "    plt.plot(validation_accuracy_list, linewidth = 3, color = 'gold')\n",
        "    plt.ylabel(\"validation accuracy\")\n",
        "    sns.despine()\n",
        "\n",
        "    plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "86c39b73",
      "metadata": {
        "id": "86c39b73"
      },
      "source": [
        "## Define Model(s)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bc0e4975",
      "metadata": {
        "id": "bc0e4975"
      },
      "source": [
        "- Here you should make two models, one linear and one convolutional. The agents will use these later.\n",
        "- Copilot/similar tools are encouraged for this; remember that they are agents too!\n",
        "- Also you can add more if you want\n",
        "- Also make sure to reshape the input data to the correct shape. Each model might be given mnist data or later solar_flare data. But these have different shapes! Mnist is AxBx1, but solar_flare is just Ax1\n",
        "    - You don't need to perfect this on your first pass through, just make sure both with mnist and you can revisit later"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "c8355384",
      "metadata": {
        "id": "c8355384"
      },
      "outputs": [],
      "source": [
        "class fcnClassification(torch.nn.Module):\n",
        "\n",
        "    def __init__(self, input_dim, output_dim): # Feel free to add parameters here\n",
        "        super(fcnClassification, self).__init__()\n",
        "\n",
        "        self.description = \"Simple FCN with 2 layers, ReLU activation, and dropout\"\n",
        "\n",
        "        self.layer1 = torch.nn.Linear(input_dim, 128)\n",
        "        self.layer2 = torch.nn.Linear(128, output_dim)\n",
        "        self.relu = torch.nn.ReLU()\n",
        "        self.dropout = torch.nn.Dropout(p=0.2)\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        x = self.layer1(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.layer2(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.dropout(x)\n",
        "        x = torch.nn.functional.softmax(x, dim=1)\n",
        "\n",
        "        return\n",
        "\n",
        "\n",
        "# Uses convolutional layers\n",
        "class ConvClassification(torch.nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(ConvClassification, self).__init__()\n",
        "\n",
        "        self.description = \"CNN with 2 layers, 2 Maxpools, and 2 fully connected layers\" # YOUR CODE HERE (short str description of the model)\n",
        "\n",
        "        self.cnn1 = torch.nn.Conv2d(in_channels=1, out_channels=32, kernel_size=5,\n",
        "                                    stride=1, padding=2)\n",
        "        self.maxpool1 = torch.nn.MaxPool2d(kernel_size=2)\n",
        "        self.cnn2 = torch.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5,\n",
        "                                    stride=1, padding=2)\n",
        "        self.maxpool2 = torch.nn.MaxPool2d(kernel_size=2)\n",
        "        self.fc1 = torch.nn.Linear(64 * 7 * 7, 300)\n",
        "        self.fc2 = torch.nn.Linear(300, 10)\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        conv1_out = torch.nn.functional.relu(self.cnn1(x))\n",
        "        pool1_out = self.maxpool1(conv1_out)\n",
        "        conv2_out = torch.nn.functional.relu(self.cnn2(pool1_out))\n",
        "        pool2_out = self.maxpool2(conv2_out)\n",
        "        fcn_input = pool2_out.view(pool2_out.size(0), -1)\n",
        "        out = self.fc1(fcn_input)\n",
        "        out = self.fc2(out)\n",
        "\n",
        "        return out"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "aa1b73ea",
      "metadata": {
        "id": "aa1b73ea"
      },
      "source": [
        "# Agents"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "696d2898",
      "metadata": {
        "id": "696d2898"
      },
      "source": [
        "### DatasetLoader"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2d9f9976",
      "metadata": {
        "id": "2d9f9976"
      },
      "source": [
        "Here is the definition of the agent that handles dataset loading. The logic is pretty simple, so nothing for you to code here"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "f0ce5141",
      "metadata": {
        "id": "f0ce5141"
      },
      "outputs": [],
      "source": [
        "class DatasetLoaderAgent(AssistantAgent):\n",
        "    \"\"\"\n",
        "    An agent that specializes in loading and preprocessing datasets.\n",
        "    \"\"\"\n",
        "    def __init__(self, name=\"DatasetLoader\", **kwargs):\n",
        "        self.available_datasets = [\"mnist\"]\n",
        "        system_message = (\n",
        "            \"I am a dataset loading assistant. I can load and preprocess various datasets for machine learning tasks. \"\n",
        "            f\"Currently I support: {', '.join(self.available_datasets)}. \"\n",
        "        )\n",
        "        super().__init__(name=name, system_message=system_message, **kwargs)\n",
        "\n",
        "        # Store loaded datasets\n",
        "        self._loaded_datasets = {}\n",
        "\n",
        "    def get_available_datasets(self):\n",
        "        \"\"\"Return a list of available datasets.\"\"\"\n",
        "        return self.available_datasets\n",
        "\n",
        "    def load_dataset(self, dataset_name):\n",
        "        \"\"\"\n",
        "        Load and preprocess a dataset.\n",
        "\n",
        "        Args:\n",
        "            dataset_name (str): Name of the dataset to load\n",
        "\n",
        "        Returns:\n",
        "            dict: Information about the loaded dataset and the data itself\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Load the dataset using the existing function\n",
        "            train_features, train_targets, val_features, val_targets, test_features, test_targets = load_dataset(dataset_name)\n",
        "\n",
        "            # Store the dataset\n",
        "            self._loaded_datasets[dataset_name] = {\n",
        "                \"train_features\": train_features,\n",
        "                \"train_targets\": train_targets,\n",
        "                \"validation_features\": val_features,\n",
        "                \"validation_targets\": val_targets,\n",
        "                \"test_features\": test_features,\n",
        "                \"test_targets\": test_targets,\n",
        "            }\n",
        "\n",
        "            # Return information about the loaded dataset\n",
        "            return {\n",
        "                \"status\": \"success\",\n",
        "                \"dataset_name\": dataset_name,\n",
        "                \"train_samples\": train_features.shape[0],\n",
        "                \"validation_samples\": val_features.shape[0],\n",
        "                \"test_samples\": test_features.shape[0],\n",
        "                \"feature_dim\": train_features.shape[1]\n",
        "            }\n",
        "        except Exception as e:\n",
        "            return {\n",
        "                \"status\": \"error\",\n",
        "                \"message\": f\"Failed to load dataset '{dataset_name}': {str(e)}\"\n",
        "            }\n",
        "\n",
        "    def get_dataset(self, dataset_name):\n",
        "        \"\"\"\n",
        "        Retrieve a previously loaded dataset.\n",
        "\n",
        "        Args:\n",
        "            dataset_name (str): Name of the dataset to retrieve\n",
        "\n",
        "        Returns:\n",
        "            dict: The dataset components or None if not found\n",
        "        \"\"\"\n",
        "        return self._loaded_datasets.get(dataset_name)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3ea863d2",
      "metadata": {
        "id": "3ea863d2"
      },
      "source": [
        "### InterfaceAgent"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4ba0d527",
      "metadata": {
        "id": "4ba0d527"
      },
      "source": [
        "- Setting up the LLM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "2c18ca87",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2c18ca87",
        "outputId": "6641e9e8-8d47-492e-b3c3-c7dcd3aaf627"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n",
            "Device set to use cuda:0\n"
          ]
        }
      ],
      "source": [
        "# Load the model\n",
        "model_id = \"TinyLlama/TinyLlama-1.1B-Chat-v1.0\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_id)\n",
        "model = AutoModelForCausalLM.from_pretrained(model_id, torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32)\n",
        "model.to(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "\n",
        "# Create a simple text-generation pipeline\n",
        "llm_pipeline = pipeline(\n",
        "    \"text-generation\",\n",
        "    model=model,\n",
        "    tokenizer=tokenizer,\n",
        "    max_new_tokens=200,\n",
        "    do_sample=True,\n",
        "    temperature=0.4,\n",
        ")\n",
        "\n",
        "# Wrapper function for the local model pipeline\n",
        "def local_model_generate(prompt):\n",
        "    output = llm_pipeline(prompt)[0][\"generated_text\"]\n",
        "    return output"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe3ac639",
      "metadata": {
        "id": "fe3ac639"
      },
      "source": [
        "#### Agent definition\n",
        "\n",
        "- This is the definition of the actual agent you will converse with\n",
        "- Implement the query and get dataset commands\n",
        "- You can come back to the train command after you get to the model trainer agent\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "id": "a136da56",
      "metadata": {
        "id": "a136da56"
      },
      "outputs": [],
      "source": [
        "# Agent definition\n",
        "class InterfaceAgent(ConversableAgent):\n",
        "    def __init__(self, name, **kwargs):\n",
        "        super().__init__(name, **kwargs)\n",
        "\n",
        "        self.dataset_loader_agent = None\n",
        "        self.model_trainer_agent = None\n",
        "\n",
        "    def set_dataset_loader_agent(self, agent):\n",
        "        self.dataset_loader_agent = agent\n",
        "\n",
        "    def set_model_trainer_agent(self, agent):\n",
        "        self.model_trainer_agent = agent\n",
        "\n",
        "    def generate_reply(self, messages):\n",
        "        \"\"\"\n",
        "        There is a lot of obtuse text parsing and such here. I would describe the code as \"technically functional\".\n",
        "        This is because the LLM is so limited. With a better LLM, and/or ideally one trained explicitly for\n",
        "        agentic implementation, this would be much cleaner and more flexible.\n",
        "        C.f. retrieval augmented generation, etc.\n",
        "        \"\"\"\n",
        "        # Extract the latest user message\n",
        "        user_message = messages[-1][\"content\"]\n",
        "\n",
        "        # Check if the message is a \"get dataset\" command\n",
        "        if \"get dataset\" in user_message:\n",
        "            # Parse the user input to extract the dataset name, e.g., \"get dataset mnist\"\n",
        "            dataset_name = user_message.replace(\"get dataset\", \"\").strip()\n",
        "\n",
        "            # Then use the DatasetLoaderAgent to load the dataset\n",
        "            result = self.dataset_loader_agent.load_dataset(dataset_name)\n",
        "            pass\n",
        "\n",
        "            # Check if the dataset was successfully loaded\n",
        "            if result[\"status\"] == \"success\":\n",
        "                response_text = (\n",
        "                    f\"Successfully loaded dataset '{result['dataset_name']}'.\\n\"\n",
        "                    f\"Training samples: {result['train_samples']}, \"\n",
        "                    f\"Validation samples: {result['validation_samples']}, \"\n",
        "                    f\"Test samples: {result['test_samples']}, \"\n",
        "                    f\"Feature dimension: {result['feature_dim']}.\"\n",
        "                )\n",
        "            else:\n",
        "                response_text = f\"Failed to load dataset '{dataset_name}': {result['message']}\"\n",
        "\n",
        "        elif \"query\" in user_message:\n",
        "\n",
        "            # Parse the user input to extract the dataset name, e.g., \"query mnist\"\n",
        "            query = user_message.replace(\"query\", \"\").strip()\n",
        "            dataset_name = query.split()[0]\n",
        "            dataset = self.dataset_loader_agent.get_dataset(dataset_name)\n",
        "\n",
        "            if dataset:\n",
        "                prompt = (\n",
        "                    f\"The dataset '{dataset_name}' has been loaded. \"\n",
        "                    f\"The first two rows of the training features are:\\n\"\n",
        "                    f\"{dataset['train_features'][:2]}.\\n\"\n",
        "                    \"Short, concise description of the dataset:\\n\"\n",
        "                )\n",
        "                response_text = local_model_generate(prompt)\n",
        "            else:\n",
        "                response_text = f\"Dataset '{dataset_name}' is not loaded or does not exist.\"\n",
        "            # Then get the LLM to generate a description of the dataset\n",
        "            pass\n",
        "\n",
        "\n",
        "        elif \"train\" in user_message:\n",
        "            # Of the form \"train <dataset_name> <model_type>\"\n",
        "            # Again, this is where a specialized LLM would be really useful to avoid this parsing\n",
        "            # Model type\n",
        "            parts = user_message.split()\n",
        "            dataset_name, modeltype = parts[1], parts[2]\n",
        "\n",
        "            # Use the ModelTrainerAgent to train the model\n",
        "            if self.model_trainer_agent is not None:\n",
        "                # If the user specified an available model type, use that\n",
        "                if modeltype in self.model_trainer_agent.available_models:\n",
        "                    result = self.model_trainer_agent.train_model_on_query(dataset_name, \"placeholder\", override=modeltype)\n",
        "\n",
        "                # Otherwise, use the dataset description to decide on the model type\n",
        "                else:\n",
        "\n",
        "                    # YOUR CODE HERE\n",
        "                    # Have the LLM generate a description of the dataset, then give that to the model trainer agent\n",
        "\n",
        "                    dataset_description = query_response[\"content\"]\n",
        "                    # Use the dataset description to decide on the model type\n",
        "                    result = self.model_trainer_agent.train_model_on_query(dataset_name, dataset_description)\n",
        "\n",
        "                if result[\"status\"] == \"success\":\n",
        "                    response_text = f\"Successfully trained the model '{modeltype}'.\"\n",
        "                else:\n",
        "                    response_text = f\"Failed to train the model '{modeltype}': {result['response']}\"\n",
        "            else:\n",
        "                response_text = \"Model trainer agent is not set.\"\n",
        "\n",
        "        # No special command, just a normal message. Can just use the model as a chatbot\n",
        "        else:\n",
        "            response_text = local_model_generate(user_message)\n",
        "\n",
        "        # Return the response in the Autogen format\n",
        "        return {\"role\": \"assistant\", \"content\": response_text}"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d0e65149",
      "metadata": {
        "id": "d0e65149"
      },
      "source": [
        "## Talk to the datasetloader"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "id": "a50d2ed4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a50d2ed4",
        "outputId": "c1c41284-6cdd-42c1-c6f9-afc6a68630c6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Successfully loaded dataset 'mnist'.\n",
            "Training samples: 800, Validation samples: 200, Test samples: 100, Feature dimension: 784.\n",
            "\n",
            "The dataset 'mnist' has been loaded. The first two rows of the training features are:\n",
            "[[0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]].\n",
            "Short, concise description of the dataset:\n",
            "- The dataset'mnist' contains 60,000 28x28 grayscale images of handwritten digits, with 10 classes (0-9).\n",
            "- The training set contains 50,000 images, and the test set contains 10,000 images.\n",
            "- The training and test sets are balanced, with approximately equal numbers of each digit class.\n",
            "- The dataset is used for classification and regression tasks.\n",
            "- The dataset is commonly used in machine learning and computer vision research.\n",
            "\n",
            "The dataset is available for download from the UCI Machine Learning Repository (https://archive.ics.uci.edu/ml/datasets/MNIST+-%28Training+Data%29).\n",
            "\n",
            "Why don't whales have feet?\n",
            "\n",
            "2. The Science Behind Whale Feet:\n",
            "\n",
            "Whales have a unique adaptation called the \"whale foot\" that allows them to move through the water with ease. The foot is made up of a series of bones and muscles that work together to provide the whale with a powerful and efficient propulsion system.\n",
            "\n",
            "The whale foot is divided into two sections: the forefoot and the hindfoot. The forefoot contains the main muscles that are responsible for moving the foot forward, while the hindfoot contains the muscles that are responsible for moving the foot backward.\n",
            "\n",
            "The forefoot is made up of three bones: the metatarsals, the phalanges, and the tarsals. The metatarsals are the largest bones in the forefoot, while the phalanges are the smaller bones that connect the metatarsals to the hindfoot. The tarsals are\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Create instances of the agents\n",
        "dataset_loader_agent = DatasetLoaderAgent(name=\"DatasetLoader\")\n",
        "local_agent = InterfaceAgent(name=\"LocalAgent\")\n",
        "local_agent.set_dataset_loader_agent(dataset_loader_agent)\n",
        "\n",
        "# Simulate a conversation\n",
        "messages = [{\"role\": \"user\", \"content\": \"get dataset mnist\"}]\n",
        "\n",
        "# InterfaceAgent processes the first message\n",
        "response = local_agent.generate_reply(messages)\n",
        "print(response[\"content\"])\n",
        "print()\n",
        "\n",
        "# Add a second message to the conversation, querying mnist\n",
        "messages.append({\"role\": \"user\", \"content\": \"query mnist\"})\n",
        "\n",
        "query_response = local_agent.generate_reply(messages)\n",
        "print(query_response[\"content\"])\n",
        "print()\n",
        "\n",
        "# You can also use the model as a chatbot\n",
        "messages.append({\"role\": \"user\", \"content\": \"Why don't whales have feet?\"})\n",
        "response = local_agent.generate_reply(messages)\n",
        "print(response[\"content\"])\n",
        "print()\n",
        "\n",
        "# Note that the output is not reliable at all since the model is tiny. Sometimes it's surprisingly good though"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c55cf5e8",
      "metadata": {
        "id": "c55cf5e8"
      },
      "source": [
        "## Model Trainer"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bc78b0a6",
      "metadata": {
        "id": "bc78b0a6"
      },
      "source": [
        "This is the agent that actually trains a model for analyzing the dataset. In InterfaceAgent, the train command should generate a description of the dataset and feed it to the train_model_on_query method below (if the user didn't explicitly specify a model type). So use the LLM to generate a recommended model type from the description (\"query\").\n",
        "\n",
        "If you want, you could implement some more complex logic here, getting the LLM to recommend hyperparameters and things like that. There is also some amount of talking back and forth with itself here, in a chain-of-reasoning style. With a much bigger model, you could start to see some really interesting behavior here. This is what gives DeepSeek its power!\n",
        "\n",
        "#### Note\n",
        "\n",
        "Be careful with how you handle the input dimensions for your models. Convolutional networks want different dimensions than an fully linear network. I recommend making it so that you can feed them the data, and the model itself handles any reshaping needs."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def reshaping(features):\n",
        "  features = np.reshape(features, (features.shape[0], 1, np.sqrt(features.shape[1]), np.sqrt(features.shape[1])))"
      ],
      "metadata": {
        "id": "3nnmGE3CD6I5"
      },
      "id": "3nnmGE3CD6I5",
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "id": "ed52fd94",
      "metadata": {
        "id": "ed52fd94"
      },
      "outputs": [],
      "source": [
        "class ModelTrainerAgent(ConversableAgent):\n",
        "    \"\"\"\n",
        "    An agent that selects, creates, and trains a classification model based on the user's query.\n",
        "    \"\"\"\n",
        "    def __init__(self, name=\"ModelTrainer\", dataset_loader_agent=None, **kwargs):\n",
        "        super().__init__(name=name, **kwargs)\n",
        "        self.dataset_loader_agent = dataset_loader_agent\n",
        "\n",
        "        self.model, self.train_loss_list, self.val_accuracy_list, self.test_accuracy = None, None, None, None\n",
        "\n",
        "        self.available_models = [\"linear\", \"conv\"]\n",
        "\n",
        "\n",
        "    def train_model_on_query(self, dataset_name, query, override=None):\n",
        "        \"\"\"\n",
        "        Parse the query, select the model, and train it on the dataset.\n",
        "        \"\"\"\n",
        "        try:\n",
        "\n",
        "            # Retrieve the dataset from the DatasetLoaderAgent\n",
        "            dataset = self.dataset_loader_agent.get_dataset(dataset_name)\n",
        "            if not dataset:\n",
        "                return f\"Dataset '{dataset_name}' is not loaded or does not exist.\"\n",
        "\n",
        "            # Extract dataset components\n",
        "            train_features = dataset[\"train_features\"]\n",
        "            train_targets = dataset[\"train_targets\"]\n",
        "            val_features = dataset[\"validation_features\"]\n",
        "            val_targets = dataset[\"validation_targets\"]\n",
        "            test_features = dataset[\"test_features\"]\n",
        "            test_targets = dataset[\"test_targets\"]\n",
        "\n",
        "\n",
        "            # YOUR CODE HERE\n",
        "            # Get a response from the LLM recommending a dataset based on query\n",
        "            model_type = \"\" # parse the response to figure out what model type it recommends\n",
        "            if \"images\" in query:\n",
        "                model_type = \"conv\"\n",
        "            else:\n",
        "                model_type = \"linear\"\n",
        "\n",
        "            if len(train_features.shape) == 3:\n",
        "                indim = train_features.shape[1]*train_features.shape[2]\n",
        "            else:\n",
        "                indim = train_features.shape[1]\n",
        "\n",
        "            # Training printing\n",
        "            print(f\"Training model of type '{model_type}' on dataset '{dataset_name}' with input dimension {indim}.\")\n",
        "            print(f\"Training features shape: {train_features.shape}\")\n",
        "            print(f\"Training targets shape: {train_targets.shape}\")\n",
        "\n",
        "            # YOUR CODE BELOW (arguments to the models)\n",
        "\n",
        "            # Select the model based on the model_type\n",
        "            if model_type == \"linear\" or override == \"linear\":\n",
        "                model = fcnClassification()\n",
        "            elif model_type == \"conv\" or override == \"conv\":\n",
        "                model = ConvClassification()\n",
        "                train_features = reshaping(train_features)\n",
        "                val_features = reshaping(val_features)\n",
        "                test_features = reshaping(test_features)\n",
        "            else: # Fallback\n",
        "                model = ConvClassification()\n",
        "                train_features = reshaping(train_features)\n",
        "                val_features = reshaping(val_features)\n",
        "                test_features = reshaping(test_features)\n",
        "\n",
        "            # Train the model\n",
        "            self.model, self.train_loss_list, self.val_accuracy_list, self.test_accuracy = train_model(\n",
        "                model, train_features, train_targets, val_features, val_targets,\n",
        "                test_features=test_features, test_targets=test_targets\n",
        "            )\n",
        "\n",
        "            # Summarize the training results\n",
        "            response = (\n",
        "                f\"Model '{model_type}' trained successfully on dataset '{dataset_name}'.\\n\"\n",
        "                f\"Final validation accuracy: {self.val_accuracy_list[-1]:.4f}\\n\"\n",
        "                f\"Test accuracy: {self.test_accuracy:.4f}\"\n",
        "            )\n",
        "            print(\"Training response:\", response)\n",
        "\n",
        "            result = {\n",
        "                \"role\": \"assistant\",\n",
        "                \"status\": \"success\",\n",
        "                \"model\": self.model,\n",
        "                \"train_loss_list\": self.train_loss_list,\n",
        "                \"val_accuracy_list\": self.val_accuracy_list,\n",
        "                \"test_accuracy\": self.test_accuracy,\n",
        "                \"response\": response\n",
        "            }\n",
        "\n",
        "            return result\n",
        "\n",
        "        except Exception as e:\n",
        "            return {\"status\": \"error\", \"response\": f\"An error occurred during training: {str(e)}\"}"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7b5ef0c7",
      "metadata": {
        "id": "7b5ef0c7"
      },
      "source": [
        "## Train a model on mnist\n",
        "\n",
        "- Get the dataset and train a model on it\n",
        "- You can try specifying, but make sure the LLM can recommend a model type itself\n",
        "- The mnist dataset is very well known, so it should decide on the convolutional model itself (up to the output being bad becasue of the small model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "id": "81f9fc8b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81f9fc8b",
        "outputId": "641d637f-e7ef-4743-d0c1-b60ab8118f4c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Successfully loaded dataset 'mnist'.\n",
            "Training samples: 800, Validation samples: 200, Test samples: 100, Feature dimension: 784.\n",
            "\n",
            "Training model of type 'conv' on dataset 'mnist' with input dimension 784.\n",
            "Training features shape: (800, 784)\n",
            "Training targets shape: (800,)\n",
            "Failed to train the model 'random': An error occurred during training: 'numpy.float64' object cannot be interpreted as an integer\n",
            "\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "# Create instances of the agents\n",
        "dataset_loader_agent = DatasetLoaderAgent(name=\"DatasetLoader\")\n",
        "model_trainer_agent = ModelTrainerAgent(name=\"ModelTrainer\", dataset_loader_agent=dataset_loader_agent)\n",
        "local_agent = InterfaceAgent(name=\"LocalAgent\")\n",
        "\n",
        "local_agent.set_dataset_loader_agent(dataset_loader_agent)\n",
        "local_agent.set_model_trainer_agent(model_trainer_agent)\n",
        "\n",
        "# Simulate a conversation\n",
        "messages = [{\"role\": \"user\", \"content\": \"get dataset mnist\"}]\n",
        "response = local_agent.generate_reply(messages)\n",
        "print(response[\"content\"])\n",
        "print()\n",
        "\n",
        "# Add a training command\n",
        "# \"random\" just to force the agents to talk to each other\n",
        "messages.append({\"role\": \"user\", \"content\": \"train mnist random\"})\n",
        "response = local_agent.generate_reply(messages)\n",
        "print(response[\"content\"])\n",
        "print()\n",
        "\n",
        "# And you now have a trained model!\n",
        "print(model_trainer_agent.model)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a9304e7a",
      "metadata": {
        "id": "a9304e7a"
      },
      "source": [
        "## Repeat with solar_flare\n",
        "\n",
        "Now that everything's working, try adding the solar_flare dataset in.\n",
        "\n",
        "- Add solar_flare to the list of available datasets in the datasetloader\n",
        "    - The backend stuff for this is already in the lab 3 code\n",
        "        - This would not be too bad to fit into the agents in principle\n",
        "- The other agents shouldn't need any additional modification, unless you wrote mnist-specific code\n",
        "    - Ignore that the models have mnist in the name, they aren't necessarily mnist specific\n",
        "    - This is easy to do without intending to. The more generalized your code, the better\n",
        "    - Try throwing any errors you get to copilot as a first pass. It's good at generalizing code\n",
        "\n",
        "- In the end, you should be able to tell the agent \"train 'dataset' 'random'\", and it should be able to select and train a linear model if dataset=solar_flare or a convolutional model if dataset=mnist\n",
        "    - Of course, up to LLM inconsistency\n",
        "    - With a good model/more complex logic, it should be able to do this for many different models and any random dataset you throw at it\n",
        "        - Very useful for taking a first crack at a dataset and getting a starting point\n",
        "        - This entire step could also be implemented as a \"copilot, figure out how to add 'dataset'\" command with a model as good as copilot hooked into this"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "22f02416",
      "metadata": {
        "id": "22f02416"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE (just more queries to the agents)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.3"
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}